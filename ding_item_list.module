<?php
/**
 * @file
 *
 * Module core file.
 */

// Item list cache validity period (seconds).
// When changing use default simple cache intervals only.
define('DING_ITEM_LIST_CACHE_TLL', 28800);

// Set style for images.
define('DING_ITEM_LIST_IMAGE_STYLE', 'ding_item_list');

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_item_list_ctools_plugin_directory($module, $plugin) {
  // we'll be nice and limit scandir() calls
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_theme().
 */
function ding_item_list_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['ding_item_list_list'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item-list',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_list_item'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item',
    'path' => $path . '/templates',
  );

  return $hooks;
}

/**
 * Get ting objects.
 *
 * @param $query
 *   Search query string.
 * @param $count
 *   Number of objects to search.
 */
function ding_item_list_get_objects($query = '', $count = 0, $no_cover = FALSE, $sort = '') {
  module_load_include('with_images.inc', 'ting');

  $results = ting_get_objects_with_images($query, $count, $sort, array(DING_ITEM_LIST_IMAGE_STYLE));

  foreach ($results as $search_item) {

    $item = new stdClass();
    $item->id = $search_item->getId();
    $item->local_id = $search_item->getLocalId();
    $item->isbn = $search_item->getIsbn();
    $item->ac_source = $search_item->getAcSource();
    $item->dc_source = $search_item->getSource();
    $item->title = $search_item->getTitle();
    $item->object = $search_item;
    $item->creator = $search_item->getOneOf('creator', 'creator_aut', 'creator_mus');
    $item->subject = $search_item->getOneOf('subject_dk5_text', 'subject_genre', 'subject');
    $item->description = $search_item->getOneOf('description', 'abstract', 'haspart_track');
    $item->year = $search_item->getDate();

    // Default values.
    $item->type = 1;
    $item->rating = 0;
    $item->rating_count = 0;
    $item->comment_count = 0;
    $item->has_rating = FALSE;

    $item->image = $search_item->getImage(DING_ITEM_LIST_IMAGE_STYLE);

    $item->entity = $search_item;

    $objects[$search_item->getLocalId()] = $item;
  }

  // TODO: Add VoxB info.


  return $objects;
}

/**
 * Create missed covers.
 *
 * @param $items
 *   Set of ting objects.
 */
function ding_item_list_create_missed_covers(&$items) {
  module_load_include('pages.inc', 'ting_covers');

  $images = array();
  foreach ($items as $search_item) {
    // Build input for ting cover.
    $images[] = $search_item->local_id . ':' . DING_ITEM_LIST_IMAGE_STYLE;
  }

  $images = _ting_covers_objects($images);

  foreach ($items as $item) {
    $index = $item->local_id . ':' . DING_ITEM_LIST_IMAGE_STYLE;
    if (!empty($images[$index])) {
      $item->image = $images[$index];
    }
  }

  return $images;
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param $keyword
 *   A generic keyword.
 * @return
 *   Hash string, meaning a certain cache id.
 */
function ding_item_list_generate_cache_id($keyword) {
  return 'ding_item_list-' . md5($keyword);
}

/**
 * Implements hook_ding_item_cache().
 */
function ding_item_list_ding_item_cache() {
  return array('ding_item_list' => t('Ding item list'));
}

