<?php
/**
 * @file
 *
 * Module core file.
 */

// Item list cache validity period (seconds).
// When changing use default simple cache intervals only.
define('DING_ITEM_LIST_CACHE_TLL', 28800);

// Set style for images.
define('DING_ITEM_LIST_IMAGE_STYLE', 'ding_item_list');

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_item_list_ctools_plugin_directory($module, $plugin) {
  // we'll be nice and limit scandir() calls
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_theme().
 */
function ding_item_list_theme($existing, $type, $theme, $path) {
  $hooks = array();

  $hooks['ding_item_list_list'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item-list',
    'path' => $path . '/templates',
  );

  $hooks['ding_item_list_item'] = array(
    'variables' => array(),
    'template' => 'ding-item-list_item',
    'path' => $path . '/templates',
  );

  return $hooks;
}

/**
 * Get ting objects.
 *
 * @param $query
 *   Search query string.
 * @param $count
 *   Number of objects to search.
 */
function ding_item_list_get_objects($query = '', $count = 0, $no_cover = FALSE, $sort = '') {
  module_load_include('pages.inc', 'ting_covers');

  $objects = array();
  $request = '(' . $query . ')';
  $page = 1;

  $covers_service = TRUE;

  if (!empty($query) && !empty($count)) {
    // Search with portions of 10 items.
    $result = ding_item_list_search_ting($request, $page++, 10, $sort);
    while (count($result)) {

      // Check images.
      $images = array();
      if (!$no_cover && $covers_service) {
        foreach ($result as $search_item) {
          // Build input for ting cover.
          $images[] = $search_item->getLocalId() . ':' . DING_ITEM_LIST_IMAGE_STYLE;
        }
        try {
          $images = _ting_covers_objects($images, TRUE);
        }
        catch (Exception $e) {
          $covers_service = FALSE;
        }
      }

      // No images for for current result set, so get more results.
      if (empty($images) && $covers_service) {
        $result = ding_item_list_search_ting($request, $page++, 10, $sort);
        continue;
      }

      foreach ($result as $search_item) {
        // Check if this item has an image and the service is available.
        $image_index = $search_item->getLocalId() . ':' . DING_ITEM_LIST_IMAGE_STYLE;
        if (empty($images[$image_index]) && $covers_service) {
          // No image, skip to another item.
          continue;
        }
        else {
          $images[$image_index] = NULL;
        }

        $item = new stdClass();
        $item->id = $search_item->getId();
        $item->local_id = $search_item->getLocalId();
        $item->isbn = $search_item->getIsbn();
        $item->ac_source = $search_item->getAcSource();
        $item->dc_source = $search_item->getSource();
        $item->title = $search_item->getTitle();
        $item->object = $search_item;
        $item->creator = $search_item->getOneOf('creator', 'creator_aut', 'creator_mus');
        $item->subject = $search_item->getOneOf('subject_dk5_text', 'subject_genre', 'subject');
        $item->description = $search_item->getOneOf('description', 'abstract', 'haspart_track');
        $item->year = $search_item->getDate();

        // Default values.
        $item->type = 1;
        $item->rating = 0;
        $item->rating_count = 0;
        $item->comment_count = 0;
        $item->has_rating = FALSE;

        $item->image = $images[$image_index];

        $objects[$search_item->getLocalId()] = $item;

        // We have needed amount of items.
        if (count($objects) == $count) {
          break(2); // Break for & while.
        }
      } // End for (building items).

      // Next portion of results.
      $result = ding_item_list_search_ting($request, $page++, 10, $sort);
    } // End while.

    // Make an array of local id's, fetchable by voxb.
    // Take only items with ISBN code.
    /*
    if (module_exists('ding_voxb')) {
      $local_ids = array();
      foreach ($objects as $local_id => $v) {
        $isbn = $v->isbn;
        if (!empty($isbn)) {
          $local_ids[$local_id] = $isbn[0];
        }
      }

      // Fetch details from voxb
      $voxb_details = new VoxbItems();
      $voxb_details->addReviewHandler('review', new VoxbReviews());
      $response = $voxb_details->fetchByISBN($local_ids);

      // Assign voxb details to items
      if ($response && $voxb_details->getCount() > 0) {
        foreach ($local_ids as $local_id => $isbn) {
          $detail = $voxb_details->getItem($isbn);
          if ($detail) {
            $objects[$local_id]->rating = (int) round($detail->getRating() / 20);
            $objects[$local_id]->rating_count = $detail->getRatingCount();
            $objects[$local_id]->comment_count = $detail->getReviews('review')
              ->getCount();
            $objects[$local_id]->has_rating = TRUE;
          }
        }
      }
    } // End VoxB.
    */
  } // End if.

  return $objects;
}

/**
 * Perform ting search.
 *
 * @param $query
 *   Searched query string.
 * @param $page
 *   Requested results page.
 * @param $records
 *   Number of records to fetch.
 * @return
 *   Ting search result object.
 */
function ding_item_list_search_ting($query = '', $page = 1, $records = 10, $sort = '') {
  module_load_include('client.inc', 'ting');

  if (!empty($query)) {
    $query = '(' . $query . ')';
    $options = array('sort' => $sort, );
    $search_result = ting_do_search($query, $page, $records, $options);

    return $search_result;
  }

  return FALSE;
}

/**
 * Create missed covers.
 *
 * @param $items
 *   Set of ting objects.
 */
function ding_item_list_create_missed_covers(&$items) {
  module_load_include('pages.inc', 'ting_covers');

  $images = array();
  foreach ($items as $search_item) {
    // Build input for ting cover.
    $images[] = $search_item->local_id . ':' . DING_ITEM_LIST_IMAGE_STYLE;
  }

  $images = _ting_covers_objects($images);

  foreach ($items as $item) {
    $index = $item->local_id . ':' . DING_ITEM_LIST_IMAGE_STYLE;
    if (!empty($images[$index])) {
      $item->image = $images[$index];
    }
  }

  return $images;
}

/**
 * Generate a cache id, based on a keyword.
 *
 * @param $keyword
 *   A generic keyword.
 * @return
 *   Hash string, meaning a certain cache id.
 */
function ding_item_list_generate_cache_id($keyword) {
  return 'ding_item_list-' . md5($keyword);
}

/**
 * Implements hook_ding_item_cache().
 */
function ding_item_list_ding_item_cache() {
  return array('ding_item_list' => t('Ding item list'));
}

